@page "/"
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Drawing.Processing
@using SixLabors.ImageSharp.PixelFormats
@using SixLabors.ImageSharp.Processing
@using CGAOB
@code {

    private string? Image64 { get; set; }
    private string? ImageAddress { get; set; }
    private int ActivePalette { get; set; } = 0;
    private readonly int _imageWidth = 160;
    private readonly int _imageHeight = 200;

    protected override void OnInitialized()
    {
        ActivePalette = new Random().Next(3);
        GenerateRandomImage();
        base.OnInitialized();
    }

    private readonly Color[] _gryPalette = 
    {
        Color.FromRgb(0,0,0),
        Color.FromRgb(85,255,85),
        Color.FromRgb(255,85,85),
        Color.FromRgb(255,255,85),
    };
    
    private readonly Color[] _cmwPalette = 
    {
        Color.FromRgb(0,0,0),
        Color.FromRgb(85,255,255),
        Color.FromRgb(255,85,255),
        Color.FromRgb(255,255,255),
    };
    
    private readonly Color[] _crwPalette = 
    {
        Color.FromRgb(0,0,0),
        Color.FromRgb(85,255,255),
        Color.FromRgb(255,85,85),
        Color.FromRgb(255,255,255),
    };

    private void CyclePalette()
    {
        ActivePalette++;
        if (ActivePalette > 2) ActivePalette = 0;
        GenerateImageFromAddress(ImageAddress);
    }

    private void GenerateImageFromAddress(string address)
    {
        var bytes = CompressionHelper.DecompressImageData(address);
        GenerateImage(bytes);
    }

    private void GenerateRandomImage(int? seed = null)
    {
        var rnd = seed.HasValue ? new Random(seed.Value) : new Random();
        var target = _imageWidth * _imageHeight;
        var bytes = new byte[target];
        for (var i = 0; i < target; i++)
        {
            bytes[i] = (byte)rnd.Next(4);
        }
        
        GenerateImage(bytes);
    }
    
    private void GenerateImage(byte[] bytes)
    {

        var palettes = new[]
        {
            _gryPalette,
            _cmwPalette,
            _crwPalette
        };
        var palette = palettes[ActivePalette];

        var response = ImageHelper.GenerateImage(bytes, palette, _imageWidth, _imageHeight);
        Image64 = response.Base64Image;
        ImageAddress = response.Address;
    }

}



<PageTitle>CGA Babel</PageTitle>

<div>
    <button type="button" class="px-4 py-2 bg-blue-500 text-white m-4" @onclick="() => CyclePalette()">Cycle Palette</button>    
    <button type="button" class="px-4 py-2 bg-blue-500 text-white m-4" @onclick="() => GenerateRandomImage()">Generate Random</button>
</div>


@if (!string.IsNullOrEmpty(Image64))
{
    <img src="@Image64" style="width: 640px; height:  400px; image-rendering: pixelated;"/>
    <div style="overflow-wrap: anywhere" class="border rounded p-4 my-2 font-mono text-xs">
        @(ImageAddress.Length * 100 / Image64.Length)
    </div>
    <div style="overflow-wrap: anywhere" class="border rounded p-4 my-2 font-mono text-xs">
        @ImageAddress
    </div>
    <div style="overflow-wrap: anywhere" class="border rounded p-4 my-2 font-mono text-xs">
        @Image64
    </div>
}
